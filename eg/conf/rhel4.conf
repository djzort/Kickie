#!/usr/bin/perl
# $Id: rhel4.conf,v 1.66 2013/10/08 00:09:25 cportman Exp $

use strict;
use warnings;

our $httplocation;
our $tftplocation;

my $pre = q|
%pre --interpreter /bin/sh
exec < /dev/tty6 > /dev/tty6 2> /dev/tty6
chvt 6

#!/bin/sh

chassis="%CHASSIS%"
lvm="%LVM%"
layout="%DISKLAYOUT%"
swapsize="%SWAPSIZE%"
extraparts="%EXTRAPART%"

if [ "$lvm" != "nolvm" ]
then
    echo 'LVM not supported' >&2
    exit 1
fi

if [ "$chassis" = "KVM" ]
then
    layout="virtual"
fi

# set fd 3 to our output file
exec 3<> '/tmp/disklayout.txt'

# This returns a list of devices
find_devices () {

    # look for cciss devices, and return if we find one
    # d1 goes first, as the storage blade will take the 0 spot
    for d in 'cciss/c1d0', 'cciss/c0d0'
    do
        if [ -e "/dev/$d" ]
        then

            if [ "$layout" != "noraid" ]
            then
                echo "Hard raid shouldnt be layered with soft raid" >2&
                exit 1
            fi

            if [ -z "${disks}" ]; then
                disks="${d}"
            else
                disks="${disks} ${d}"
            fi
        fi
    done

    # return if we have found some disks
    if [ ! -z "${disks}" ]; then
        return
    fi

    # look for scsi devices, and return if we find one
    for d in sda sdb sdc
    do
        if [ -e "/dev/$d" ]
        then
            if [ -z "${disks}" ]; then
                disks="${d}"
            else
                disks="${disks} ${d}"
            fi
        fi
    done

    # return if we have found some disks
    if [ ! -z "${disks}" ]; then
        return
    fi

    # look for ide devices, and return if we find one
    for d in hda hdb hdc
    do
        if [ -e "/dev/$d" ]
        then
            if [ -z "${disks}" ]; then
                disks="${d}"
            else
                disks="${disks} ${d}"
            fi
        fi
    done

    # return if we have found some disks
    if [ ! -z "${disks}" ]; then
        return
    fi

    echo "No disks found?" >&2
    exit 1

}

# Basic no raid profile
noraid () {

    for d in ${disks}
    do
        dev=${d}
        break
    done

    echo "clearpart --all --initlabel" >&3
    echo "part /boot   --ondisk=$dev --size=100" >&3
    echo "part /       --ondisk=$dev --size=1      --grow" >&3

    if [ "$extraparts" ]
    then

        for d in "`echo "${extraparts}" \| sed 's/,/\n/g' - `"
        do

            m="${d%=*}"
            s="${d##*=}"

            echo "part $m --ondisk=$dev --size=$s --asprimary" >&3

        done

    fi

    if [ $swapsize ] && [ $swapsize -gt 0 ]
    then
        echo "part swap    --ondisk=$dev --size=$swapsize --asprimary" >&3
    fi

}

# Basic raid0 profile
raid0 () {
    if [ `echo -e "${disks}" \| wc -w` -lt "2" ]
    then
        echo "Not enough disks for raid0" >&2
        exit 1
    fi

    for d in $disks
    do
        if [ -z "${deva}" ]; then
            deva=${d}
        else
            devb=${d}
            break
        fi
    done

    echo "clearpart --all --initlabel" >&3

    echo "part raid.00 --ondisk=$deva --size=100    --asprimary" >&3
    echo "part raid.10 --ondisk=$devb --size=100    --asprimary" >&3

    echo "part raid.01 --ondisk=$deva --size=1      --grow" >&3
    echo "part raid.11 --ondisk=$devb --size=1      --grow" >&3

    c=1

    if [ "$extraparts" ]
    then

        for d in "`echo "${extraparts}" \| sed 's/,/\n/g' - `"
        do

            c=$(($c+1))

            m="${d%=*}"
            s="${d##*=}"

            echo "part raid.0$c --ondisk=$deva --size=$s   --asprimary" >&3
            echo "part raid.1$c --ondisk=$deva --size=$s   --asprimary" >&3

            extras="${extras}raid $m --level=0    --device=md$c   raid.0$c raid.1$c\n"

        done

    fi

    if [ $swapsize ] && [ $swapsize -gt 0 ]
    then

        c=$(($c+1))

        echo "part raid.0$c --ondisk=$deva --size=$swapsize   --asprimary" >&3
        echo "part raid.1$c --ondisk=$devb --size=$swapsize   --asprimary" >&3

        extras="${extras}raid swap    --level=0   --device=md$c  raid.0$c raid.1$c\n"

    fi

    # /boot has to be mirrored, the bios cant boot striped
    echo "raid /boot   --level=1   --device=md0   raid.00 raid.10" >&3
    echo "raid /       --level=0   --device=md1  raid.01 raid.11" >&3

    if [ "$extras" ]
    then
        echo $extras  >&3
    fi

}

# Basic raid1 profile
raid1 () {

    if [ `echo -e "${disks}" \| wc -w` -lt "2" ]
    then
        echo "Not enough disks for raid1" >&2
        exit 1
    fi

    for d in $disks
    do
        if [ -z "${deva}" ]; then
            deva=${d}
        else
            devb=${d}
            break
        fi
    done

    echo "clearpart --all --initlabel" >&3

    echo "part raid.00 --ondisk=$deva --size=100    --asprimary" >&3
    echo "part raid.10 --ondisk=$devb --size=100    --asprimary" >&3

    echo "part raid.01 --ondisk=$deva --size=1      --grow" >&3
    echo "part raid.11 --ondisk=$devb --size=1      --grow" >&3

    c=1

    if [ "$extraparts" ]
    then

        for d in "`echo ${extraparts} \| sed 's/,/\n/g' - `"
        do

            c=$(($c+1))

            m="${d%=*}"
            s="${d##*=}"

            echo "part raid.0$c --ondisk=$deva --size=$s   --asprimary" >&3
            echo "part raid.1$c --ondisk=$deva --size=$s   --asprimary" >&3

            extras="${extras}raid $m --level=1    --device=md$c   raid.0$c raid.1$c\n"

        done

    fi

    if [ $swapsize ] && [ $swapsize -gt 0 ]
    then

        c=$(($c+1))

        echo "part raid.0$c --ondisk=$deva --size=$swapsize   --asprimary" >&3
        echo "part raid.1$c --ondisk=$devb --size=$swapsize   --asprimary" >&3

        extras="${extras}raid swap    --level=1   --device=md$c  raid.0$c raid.1$c\n"

    fi

    # /boot has to be mirrored, the bios cant boot striped
    echo "raid /boot   --level=1   --device=md0   raid.00 raid.10" >&3
    echo "raid /       --level=1   --device=md1  raid.01 raid.11" >&3

    if [ "$extras" ]
    then
        echo $extras  >&3
    fi

}

# Basic raid5 profile
raid5 () {

    if [ `echo -e "${disks}" \| wc -w` -lt "3" ]
    then
        echo "Not enought disks for raid5" >&2
        exit 1
    fi

    for d in $disks
    do
        if [ -z "${deva}" ]; then
            deva=${d}
        else
            if [ -z "${devb}" ]; then
                devb=${d}
            else
                devc=${d}
                break
            fi
        fi
    done

    echo "clearpart --all --initlabel" >&3

    echo "part raid.00 --ondisk=$deva --size=100     --asprimary" >&3
    echo "part raid.10 --ondisk=$devb --size=100     --asprimary" >&3
    echo "part raid.20 --ondisk=$devc --size=100     --asprimary" >&3

    echo "part raid.01 --ondisk=$deva --size=1       --grow" >&3
    echo "part raid.11 --ondisk=$devb --size=1       --grow" >&3
    echo "part raid.21 --ondisk=$devc --size=1       --grow" >&3

    c=1

    if [ "$extraparts" ]
    then

        for d in "`echo ${extraparts} \| sed 's/,/\n/g' - `"
        do

            c=$(($c+1))

            m="${d%=*}"
            s="${d##*=}"

            echo "part raid.0$c --ondisk=$deva --size=$s   --asprimary" >&3
            echo "part raid.1$c --ondisk=$devb --size=$s   --asprimary" >&3
            echo "part raid.2$c --ondisk=$devc --size=$s   --asprimary" >&3

            extras="${extras}raid $m --level=5    --device=md$c   raid.0$c raid.1$c raid.2$c\n"

        done

    fi

    if [ $swapsize ] && [ $swapsize -gt 0 ]
    then

        c=$(($c+1))

        echo "part raid.0$c --ondisk=$deva --size=$swapsize    --asprimary" >&3
        echo "part raid.1$c --ondisk=$devb --size=$swapsize    --asprimary" >&3
        echo "part raid.2$c --ondisk=$devc --size=$swapsize    --asprimary" >&3

        extras="${extras}raid swap    --level=5   --device=md$c  raid.0$c raid.1$c raid.2$c\n"

    fi

    # /boot has to be mirrored, the bios cant boot parity
    echo "raid /boot   --level=1   --device=md0  raid.00 raid.10 raid.20" >&3
    echo "raid /       --level=5   --device=md1  raid.01 raid.11 raid.21" >&3

    if [ "$extras" ]
    then
        echo $extras  >&3
    fi

}

# Virtio and VMware Disks are special
# VMware uses the standard /dev/sd[a-z][0-9] as opposed to /dev/vd[a-z][0-9]
#ARG!! Parted in RHEL4 does not support sectors!
virtual () {
    echo "This is a virtual machine"
    echo "Creating partitions for the VM"

    dev="sda"
    if [ -e '/dev/vda' ]
    then
        dev="vda"
    elif [ -e '/dev/hda' ]
    then
        dev="hda"
    fi
    
    fdiskcmd="u"
    
    echo "Disk device is /dev/${dev}"

    # 64s aligned
    start=204864

    # create the partitions now
    parted -s /dev/${dev} mklabel msdos

    fdiskcmd="${fdiskcmd}
n
p
1
64
204863
"
    echo "part /boot --onpart=${dev}1" >&3

    c=1

    if [ "$extraparts" ]
    then

        for d in "`echo ${extraparts} \| sed 's/,/\n/g' - `"
        do

            c=$(($c+1))

            s="${d##*=}"
            m="${d%=*}"

            # sectors=(N * megabytes * kilobytes) / sector size
            finish=$((start + (s*1024*1024)/512 - 1))

            fdiskcmd="${fdiskcmd}
n
p
${c}
${start}
${finish}
"
            echo "part $m --onpart=${dev}$c" >&3

            # ready for next disk
            start=$((finish+1))

        done

    fi

    if [ "$swapsize" -gt "0" ]
    then

        c=$(($c+1))

        # sectors=(N * megabytes * kilobytes) / sector size
        finish=$(($start + ($swapsize * 1024 * 1024)/512 - 1))

        fdiskcmd="${fdiskcmd}
n
p
${c}
${start}
${finish}
"
        echo "part swap --onpart=${dev}$c" >&3

        # ready for next disk
        start=$(($finish+1))

    fi

    c=$(($c+1))

    fdiskcmd="${fdiskcmd}
n
p
${c}
${start}

p
w
"
    echo "${fdiskcmd}" \| fdisk /dev/${dev}
    echo "part / --onpart=${dev}$c" >&3

}

# find devices firstly

find_devices

# decide what to do
case $layout in

    noraid)
        noraid
    ;;

    raid0)
        raid0
    ;;

    raid1)
        raid1
    ;;

    raid5)
        raid5
    ;;
    
    virtual)
        virtual
    ;;

    *)
    echo 'Something bad happened!!!!' >&2
    exit 1

esac

# close fd 3
exec 3>&-

chvt 1
exit 0

|;


our %files = (

    "$httplocation/%MACADDR%" => <<'EOCONF'
install
url --url http://%YUMREPOS%/../rhel4/base/%ARCH%
lang en_US
langsupport --default en_US.iso885915 en_US.iso885915
keyboard us
skipx
network %NETWORKCONFIG%
rootpw foobar
firewall --disabled
selinux --disabled
authconfig --enableshadow --enablemd5
timezone --utc Australia/Sydney
bootloader --location mbr

%include /tmp/disklayout.txt

reboot

%packages --resolvedeps
-prelink
-rpmdb-redhat
-isdn4k-utils
-up2date
-gpm
-autofs
-ppp
-rp-pppoe
-wvdial
rcs
cvs
ntp
-libX11
-libXau
-libXcursor
-libXdmcp
-libXext
-libXfixes
-libXft
-libXi
-libXinerama
-libXrandr
-libXrender
-gtk2
-cairo
-hicolor-icon-them
-system-config-securitylevel-tui
-trousers
-pango
-ecryptfs-utils
-libtiff
-krb5-workstation
-jwhois
-pam_ccreds
-pam_krb5
-pam_passwdqc
-pam_pkcs11
-pam_smb
-quota
-specspo
-udftools
-yp-tools
-ypbind
-yp-bind
-rsh
-rmt
-dump
-rdisk
-pkinit-nss
-nss_ldap
-libpng
-cups-libs
-libjpeg
-redhat-release-notes
-bitstream-vera-fonts
-aspell
-aspell-en
-rhpl
-wireless-tools

%post
# do not load ipv6
echo 'alias net-pf-10 off' >> /etc/modprobe.conf

# assume swapped interfaces on SR1300 and rename to eth0
if [ "%KSDEVICE%" != "eth0" ]
then
  mv -fv /etc/sysconfig/network-scripts/ifcfg-{eth0,%KSDEVICE%.bak}
  mv -fv /etc/sysconfig/network-scripts/ifcfg-{%KSDEVICE%,eth0}
  mv -fv /etc/sysconfig/network-scripts/ifcfg-{%KSDEVICE%.bak,%KSDEVICE%}
  perl -pi -e 's/DEVICE=%KSDEVICE%/DEVICE=eth0/' /etc/sysconfig/network-scripts/ifcfg-eth0
  perl -pi -e 's/DEVICE=eth0/DEVICE=%KSDEVICE%/' /etc/sysconfig/network-scripts/ifcfg-%KSDEVICE%
  perl -pi -e 's/^alias eth0 /alias %KSDEVICE% / || s/^alias %KSDEVICE% /alias eth0 /' /etc/modprobe.conf
fi

if [ "%ARCH%" = "x86_64" ]
then
  rpm -qa --queryformat '%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}\n' | perl -ne 'print if /\.i[36]86$/' | xargs rpm -e
fi

# install grub on the second hard drive
if [ -e "/dev/md0" ]
then
/sbin/grub --batch --no-floppy <<EOT
root (hd0,0)
setup (hd0)
setup (hd1)
quit
EOT
fi

wget -O /dev/null http://%KSHOST%/cgi-bin/complete.cgi?macaddr=%MACADDR%\&autobuilder=%AUTOBUILDER%

EOCONF

. $pre,

    "$tftplocation/pxelinux.cfg/01-%MACADDR%" => <<'EOCONF',
default rhel4

label rhel4
  kernel rhel4-%ARCH%/vmlinuz
  append initrd=rhel4-%ARCH%/initrd.img ramdisk_size=10000 ks=http://%KSPRIVATE%/kickstart/%MACADDR% ksdevice=%KSDEVICE% %BOOTOPT%
EOCONF

);
1;
