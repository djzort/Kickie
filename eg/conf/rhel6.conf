#!/usr/bin/perl
# $Id: rhel6.conf,v 1.65 2011/12/22 05:40:28 deanh Exp $

use strict;
use warnings;

our $httplocation;
our $tftplocation;

my $release = '6.2';

my $pre = q|
%pre --interpreter /bin/bash
#!/bin/bash

lvm="%LVM%"
layout="%DISKLAYOUT%"
swapsize="%SWAPSIZE%"

# set up extraparts
while IFS=',' read -ra ADDR; do
    for i in "${ADDR[@]}"; do
        extraparts[${#extraparts[*]}]=$i
    done
done <<< "%EXTRAPART%"

if [ "$lvm" != "nolvm" ]
then
    echo 'LVM not supported' >&2
    exit 1
fi

# set fd 3 to our output file
exec 3<> '/tmp/disklayout.txt'

# This returns a list of devices
find_devices () {

    # look for cciss devices, and return if we find one
    # d1 goes first, as the storage blade will take the 0 spot
    for d in 'cciss/c1d0', 'cciss/c0d0'
    do
        if [ -e "/dev/$d" ]
        then

            if [ "$layout" != "noraid" ]
            then
                echo "Hard raid shouldnt be layered with soft raid" >2&
                exit 1
            fi

            disks[${#disks[*]}]=$d
        fi
    done

    # return if we have found some disks
    if [ ! -z "${disks[0]}" ]; then
        return
    fi

    # look for scsi devices, and return if we find one
    for d in sd{a..z}
    do
        if [ -e "/dev/$d" ]
        then
            disks[${#disks[*]}]=$d
        fi
    done

    # return if we have found some disks
    if [ ! -z "${disks[0]}" ]; then
        return
    fi

    # look for ide devices, and return if we find one
    for d in hd{a..z}
    do
        if [ -e "/dev/$d" ]
        then
            disks[${#disks[*]}]=$d
        fi
    done

    # return if we have found some disks
    if [ ! -z "${disks[0]}" ]; then
        return
    fi

    echo "No disks found?" >&2
    exit 1

}

# Basic no raid profile
noraid () {

    dev=${disks[0]}

    # HP blades: swap the devices around if there is a storage blade
    if [ ${#disks[*]} -le "2" ] &&
       [ -e "/proc/scsi/scsi" ] &&
       [ `grep 'HP.*LOGICAL VOLUME' /proc/scsi/scsi \| wc -l` -le "2" ]
    then
       dev=${disks[((${#disks[@]} - 1))]}
    fi

    echo "clearpart --all --initlabel" >&3
    echo "part /boot   --ondisk=$dev --size=100    --asprimary --fsoptions=nodev" >&3
    echo "part /       --ondisk=$dev --size=1      --grow" >&3

    for d in "${extraparts[@]}"
    do

        m="${d%=*}"
        s="${d##*=}"

        echo "part $m --ondisk=$dev --size=$s --asprimary --fsoptions=nodev" >&3

    done

    if [ $swapsize ] && [ $swapsize -gt 0 ]
    then
        echo "part swap    --ondisk=$dev --size=$swapsize --asprimary" >&3
    fi

}

# Basic raid0 profile
raid0 () {

    if [ ${#disks[*]} -le "2" ]
    then
        echo "Not enought disks for raid0" >&2
        exit 1
    fi

    deva=${disks[0]}
    devb=${disks[1]}

    echo "clearpart --all --initlabel\n" >&3

    echo "part raid.00 --ondisk=$deva --size=100    --asprimary\n" >&3
    echo "part raid.10 --ondisk=$devb --size=100    --asprimary\n" >&3

    echo "part raid.01 --ondisk=$deva --size=1      --grow\n" >&3
    echo "part raid.11 --ondisk=$devb --size=1      --grow\n" >&3

    c=1

    for d in "${extraparts[@]}"
    do

        c=$((c+1))

        m="${d%=*}"
        s="${d##*=}"

        echo "part raid.0$c --ondisk=$deva --size=$s   --asprimary\n" >&3
        echo "part raid.1$c --ondisk=$deva --size=$s   --asprimary\n" >&3

        extras="${extras}raid $m --level=0    --device=md$c  --fsoptions=nodev  raid.0$c raid.1$c\n"

    done

    if [ $swapsize ] && [ $swapsize -gt 0 ]
    then

        c=$((c+1))

        echo "part raid.0$c --ondisk=$deva --size=$swapsize   --asprimary" >&3
        echo "part raid.1$c --ondisk=$devb --size=$swapsize   --asprimary" >&3

        extras="${extras}raid swap    --level=0   --device=md$c  raid.0$c raid.1$c\n"

    fi

    # /boot has to be mirrored, the bios cant boot striped
    echo "raid /boot   --level=1   --device=md0  --fsoptions=nodev  raid.00 raid.10" >&3
    echo "raid /       --level=0   --device=md1  raid.01 raid.11" >&3

    if [ $extras ]
    then
        echo -e $extras  >&3
    fi

}

# Basic raid1 profile
raid1 () {

    if [ ${#disks[*]} -le "2" ]
    then
        echo "Not enought disks for raid1" >&2
        exit 1
    fi

    deva=${disks[0]}
    devb=${disks[1]}

    echo "clearpart --all --initlabel" >&3

    echo "part raid.00 --ondisk=$deva --size=100    --asprimary" >&3
    echo "part raid.10 --ondisk=$devb --size=100    --asprimary" >&3

    echo "part raid.01 --ondisk=$deva --size=1      --grow" >&3
    echo "part raid.11 --ondisk=$devb --size=1      --grow" >&3

    c=1

    for d in "${extraparts[@]}"
    do

        c=$((c+1))

        m="${d%=*}"
        s="${d##*=}"

        echo "part raid.0$c --ondisk=$deva --size=$s   --asprimary" >&3
        echo "part raid.1$c --ondisk=$deva --size=$s   --asprimary" >&3

        extras="${extras}raid $m --level=1    --device=md$c  --fsoptions=nodev  raid.0$c raid.1$c\n"

    done

    if [ $swapsize ] && [ $swapsize -gt 0 ]
    then

        c=$((c+1))

        echo "part raid.0$c --ondisk=$deva --size=$swapsize   --asprimary" >&3
        echo "part raid.1$c --ondisk=$devb --size=$swapsize   --asprimary" >&3

        extras="${extras}raid swap    --level=1   --device=md$c  raid.0$c raid.1$c\n"

    fi

    # /boot has to be mirrored, the bios cant boot striped
    echo "raid /boot   --level=1   --device=md0  --fsoptions=nodev  raid.00 raid.10" >&3
    echo "raid /       --level=1   --device=md1  raid.01 raid.11" >&3

    if [ $extras ]
    then
        echo -e $extras  >&3
    fi

}

# Basic raid5 profile
raid5 () {

    if [ ${#disks[*]} -le "3" ]
    then
        echo "Not enought disks for raid5" >&2
        exit 1
    fi

    deva=${disks[0]}
    devb=${disks[1]}
    devc=${disks[2]}

    echo "clearpart --all --initlabel" >&3

    echo "part raid.00 --ondisk=$deva --size=100     --asprimary" >&3
    echo "part raid.10 --ondisk=$devb --size=100     --asprimary" >&3
    echo "part raid.20 --ondisk=$devc --size=100     --asprimary" >&3

    echo "part raid.01 --ondisk=$deva --size=1       --grow" >&3
    echo "part raid.11 --ondisk=$devb --size=1       --grow" >&3
    echo "part raid.21 --ondisk=$devc --size=1       --grow" >&3

    c=1

    for d in "${extraparts[@]}"
    do

        c=$((c+1))

        m="${d%=*}"
        s="${d##*=}"

        echo "part raid.0$c --ondisk=$deva --size=$s   --asprimary" >&3
        echo "part raid.1$c --ondisk=$devb --size=$s   --asprimary" >&3
        echo "part raid.2$c --ondisk=$devc --size=$s   --asprimary" >&3

        extras="${extras}raid $m --level=5    --device=md$c  --fsoptions=nodev  raid.0$c raid.1$c raid.2$c\n"

    done

    if [ $swapsize ] && [ $swapsize -gt 0 ]
    then

        c=$((c+1))

        echo "part raid.0$c --ondisk=$deva --size=$swapsize    --asprimary" >&3
        echo "part raid.1$c --ondisk=$devb --size=$swapsize    --asprimary" >&3
        echo "part raid.2$c --ondisk=$devc --size=$swapsize    --asprimary" >&3

        extras="${extras}raid swap    --level=5   --device=md$c  raid.0$c raid.1$c raid.2$c\n"

    fi

    # /boot has to be mirrored, the bios cant boot parity
    echo "raid /boot   --level=1   --device=md0  --fsoptions=nodev raid.00 raid.10 raid.20" >&3
    echo "raid /       --level=5   --device=md1  raid.01 raid.11 raid.21" >&3

    if [ $extras ]
    then
        echo $extras  >&3
    fi

}

# Virtio Disks are special
if [ -e '/dev/vda' ]
then

    if [ "$layout" != "noraid" ]
    then
        echo "Virtual machines shouldnt use soft raid" >&2
        exit 1
    fi

    # 64s aligned
    start=204864

    # create the partitions now
    parted -s /dev/vda mktable msdos
    parted -s /dev/vda mkpart primary 64s 204863s

    echo "part /boot --onpart=vda1 --fsoptions=nodev" >&3

    c=1

    for d in "${extraparts[@]}"
    do

        c=$((c+1))

        m="${d##*=}"
        s="${d%=*}"

        # sectors=(N * megabytes * kilobytes) / sector size
        finish=$((start + (s*1024*1024)/512 - 1))

        parted -s /dev/vda mkpart primary "${start}s" "${finish}s"

        echo "part $m --onpart=vda$c --fsoptions=nodev" >&3

        # ready for next disk
        start=$((finish+1))

    done

    if [ $swapsize ] && [ $swapsize -gt 0 ]
    then

        c=$((c+1))

        # sectors=(N * megabytes * kilobytes) / sector size
        finish=$((start + (swapsize * 1024 * 1024)/512 - 1))

        parted -s /dev/vda mkpart primary "${start}s" "${finish}s"

        echo "part swap --onpart=vda$c" >&3

        # ready for next disk
        start=$((finish+1))

    fi

    c=$((c+1))

    parted -s -- /dev/vda mkpart primary "${start}s" -1s

    echo "part / --onpart=vda$c" >&3

    # close fd 3
    exec 3>&-

    exit 0

fi

# find devices firstly

find_devices

# decide what to do
case $layout in

    noraid)
        noraid
    ;;

    raid0)
        raid0
    ;;

    raid1)
        raid1
    ;;

    raid5)
        raid5
    ;;

    *)
    echo 'Something bad happened!!!!' >&2
    exit 1

esac

# close fd 3
exec 3>&-

exit 0

|;


our %files = (

    "$httplocation/%MACADDR%" => <<'EOCONF'
install
url --url http://%YUMREPOS%/rhel6-%ARCH%/disc1
repo --name=updates --baseurl=http://%YUMREPOS%/rhel6-%ARCH%/RPMS.updates
repo --name=soe --baseurl=http://%YUMREPOS%/rhel6-%ARCH%/RPMS.soe
repo --name=optional --baseurl=http://%YUMREPOS%/rhel6-%ARCH%/RPMS.optional
lang en_AU
keyboard us
skipx
text
network %NETWORKCONFIG%
rootpw --iscrypted $1$QdjLV.dx$Z9cH/L2K2LKKNQgKoc2D5.
firewall --disabled
selinux --disabled
authconfig --enableshadow --enablemd5
timezone --utc Australia/Sydney
bootloader --md5pass=\$1\$DpfsC0\$1BGpKZn5CbCmIMzMa2LzM0 --location=mbr %BOOTLOADERAPPEND%
firstboot --disabled
logging --level=debug --host=%SYSLOGSERVER%
key (71cac2eb758e8cc2)

%include /tmp/disklayout.txt

reboot

%packages --nobase
@core
perl-OIE
pciutils
rcs
cvs
yum-plugin-versionlock
yum-plugin-priorities
yum-utils
yum-metadata-parser
openssh-clients
sendmail
man
sos
iotop
ltrace
valgrind
perf
screen
tmpwatch
lsscsi
-libhugetlbfs
-prelink
-parted
-coolkey
-dosfstools
-libaio
-rdate
-conman
-pcmciautils
-redhat-lsb
-mtools
-dos2unix
-NetworkManager
-pinfo
-sysreport
-rp-pppoe
-unix2dos
-mkbootdisk
-amtu
-system-config-network-tui
-oddjob
-ccid
-logwatch
-usbutils
-talk
-OpenIPMI
-libX11
-libXau
-libXcursor
-libXdmcp
-libXext
-libXfixes
-libXft
-libXi
-libXrandr
-libXrender
-postfix
-gtk2
-cairo
-hicolor-icon-them
-system-config-securitylevel-tui
-trousers
-pango
-ecryptfs-utils
-libtiff
-krb5-workstation
-jwhois
-pam_krb5
-pam_passwdqc
-pam_pkcs11
-quota
-udftools
-yp-tools
-ypbind
-rsh
-rmt
-dump
-libpng
-cups-libs
-libjpeg
-aspell
-aspell-en
-wireless-tools
-libcap-ng
-rhn-setup
-rhn-check
-rhnsd
-yum-rhn-plugin
-dhclient
-acl
-libdrm
-policycoreutils
-iwl5150-firmware
-aic94xx-firmware
-iwl5000-firmware
-atmel-firmware
-iwl1000-firmware
-ql2200-firmware
-rt73usb-firmware
-ql2500-firmware
-ipw2100-firmware
-ipw2200-firmware
-iwl100-firmware
-iwl6000g2a-firmware
-iwl6000g2b-firmware
-kernel-firmware
-bfa-firmware
-iwl6050-firmware
-iwl6000-firmware
-ql2400-firmware
-libertas-usb8388-firmware
-xorg-x11-drv-ati-firmware
-iwl4965-firmware
-iwl3945-firmware
-rt61pci-firmware
-ql2100-firmware
-zd1211-firmware
-ql23xx-firmware
-ivtv-firmware
-netxen-firmware
-audit
-plymouth
-plymouth-core-libs
-plymouth-scripts
-mysql-libs
-rpm-build
-automake
-autoconf
-patch
-b43-openfwwf
-subscription-manager
-system-config-firewall-base

%post
# do not load ipv6
echo 'options ipv6 disable=1' >> /etc/modprobe.d/oie.conf

# set the hp watchdog timer to 10 mins
echo 'options hpwdt soft_margin=3600 allow_kdump=1' >> /etc/modprobe.d/oie.conf

# assume swapped interfaces on SR1300 and rename to eth0
if [ "%KSDEVICE%" != "eth0" ]
then

  mv -fv /etc/sysconfig/network-scripts/ifcfg-{eth0,%KSDEVICE%.bak}
  mv -fv /etc/sysconfig/network-scripts/ifcfg-{%KSDEVICE%,eth0}
  mv -fv /etc/sysconfig/network-scripts/ifcfg-{%KSDEVICE%.bak,%KSDEVICE%}

  perl -pi -e 's/DEVICE="%KSDEVICE%/DEVICE="eth0/' /etc/sysconfig/network-scripts/ifcfg-eth0
  perl -pi -e 's/DEVICE="eth0/DEVICE="%KSDEVICE%/' /etc/sysconfig/network-scripts/ifcfg-%KSDEVICE%

fi

perl -pi -e 's/NM_CONTROLLED="yes"/NM_CONTROLLED="no"/' /etc/sysconfig/network-scripts/ifcfg-eth0
perl -pi -e 's/^(DNS1=.+)/#$1/' /etc/sysconfig/network-scripts/ifcfg-eth0
echo 'GATEWAYDEV="eth0"' >> /etc/sysconfig/network


# nudge dns
perl -pi -e 's/(search.+)/$1 optusnet.com.au/' /etc/resolv.conf


# install grub on the second hard drive
if [ -e "/dev/md0" ]
then
/sbin/grub --batch --no-floppy <<EOT
root (hd0,0)
setup (hd0)
setup (hd1)
quit
EOT
fi

YUM_EXCLUDE=""

if [ "%ARCH%" = "x86_64" ]
then
  export YUM_EXCLUDE="kernel kernel-smp kernel-hugemem *.i?86"
else
  export YUM_EXCLUDE="kernel kernel-smp kernel-hugemem *.x86_64"
fi

# rhel6 does things differently, so will require this to be rethought
# if [ "%SERIALDEVICE%" = "none" ]
# then
#   cp /etc/inittab /etc/inittab.old
#   sed -e "s!^c1:2345:respawn:.*!c1:2345:respawn:/sbin/getty ttyS0 DT19200 vt100-nav!" </etc/inittab.old >/etc/inittab
#   cp /etc/inittab /etc/inittab.old
#   sed -e "s!^c2:2345:respawn:.*!c2:2345:respawn:/sbin/getty ttyS1 DT19200 vt100-nav!" </etc/inittab.old >/etc/inittab
#
# else
  # console on serial
#   cp /etc/inittab /etc/inittab.old
#   sed -e "s!^co:2345:respawn:.*!co:2345:respawn:/sbin/getty %SERIALDEVICE% DT%SERIALSPEED% vt100-nav!" </etc/inittab.old >/etc/inittab
# fi


rm -f /etc/yum.repos.d/*.repo
for i in 'os' 'updates' 'soe' 'optional' ; do
	cat <<EOF >>/etc/yum.repos.d/oie.repo
[$i]
name=$i
baseurl=http://%YUMREPOS%/rhel6-%ARCH%/RPMS.$i/
priority=1
gpgcheck=0
exclude=$YUM_EXCLUDE

EOF

done

if [ "%ARCH%" = "x86_64" ]
then
  rpm -qa --queryformat '%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}\n' | perl -ne 'print if /\.i[36]86$/' | xargs yum remove -y
fi

perl -pi -e 's/^exclude.*$//' /etc/yum.conf
printf "exclude=%s\n" $YUM_EXCLUDE >> /etc/yum.conf

# this needs to change once the branch is merged
echo "export CONFORM_URI=http://conformer.optusnet.com.au/conform/optusnet" > /etc/profile.d/conform.sh

# mess with grub
perl -pi -e 's/^(splashimage.*)$/#$1/' /boot/grub/grub.conf
perl -pi -e 's/^(hiddenmenu.*)$/#$1/' /boot/grub/grub.conf
perl -pi -e 's/\squiet//' /boot/grub/grub.conf
perl -pi -e 's/\srhgb//' /boot/grub/grub.conf

# quietened down grub
/usr/sbin/plymouth-set-default-theme text --rebuild-initrd

# increase umask
perl -i -p -e 's/^umask 0.*$/umask 027/' /etc/rc.d/init.d/functions

curl -s -o /dev/null http://%KSHOST%/cgi-bin/complete.cgi?macaddr=%MACADDR%\&autobuilder=%AUTOBUILDER%

EOCONF

. $pre,

    "$tftplocation/pxelinux.cfg/01-%MACADDR%" => <<"EOCONF",
default rhel6

label rhel6
  kernel rhel${release}-%ARCH%/vmlinuz
  append initrd=rhel${release}-%ARCH%/initrd.img ramdisk_size=10000 ks=http://%KSPRIVATE%/kickstart/%MACADDR% ksdevice=%KSDEVICE% %BOOTOPT%  noipv6 nomodeset
EOCONF

);
1;
